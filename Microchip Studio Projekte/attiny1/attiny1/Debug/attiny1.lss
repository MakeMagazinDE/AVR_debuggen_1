
attiny1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00803f80  00803f80  00000510  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000049c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00803f80  00803f80  00000510  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000510  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000540  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000020  00000000  00000000  0000057c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001781  00000000  00000000  0000059c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001428  00000000  00000000  00001d1d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000365  00000000  00000000  00003145  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000034  00000000  00000000  000034ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000ac0  00000000  00000000  000034e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000047  00000000  00000000  00003fa0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000010  00000000  00000000  00003fe7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	28 c0       	rjmp	.+80     	; 0x54 <__bad_interrupt>
   4:	27 c0       	rjmp	.+78     	; 0x54 <__bad_interrupt>
   6:	26 c0       	rjmp	.+76     	; 0x54 <__bad_interrupt>
   8:	25 c0       	rjmp	.+74     	; 0x54 <__bad_interrupt>
   a:	24 c0       	rjmp	.+72     	; 0x54 <__bad_interrupt>
   c:	23 c0       	rjmp	.+70     	; 0x54 <__bad_interrupt>
   e:	22 c0       	rjmp	.+68     	; 0x54 <__bad_interrupt>
  10:	21 c0       	rjmp	.+66     	; 0x54 <__bad_interrupt>
  12:	20 c0       	rjmp	.+64     	; 0x54 <__bad_interrupt>
  14:	1f c0       	rjmp	.+62     	; 0x54 <__bad_interrupt>
  16:	1e c0       	rjmp	.+60     	; 0x54 <__bad_interrupt>
  18:	1d c0       	rjmp	.+58     	; 0x54 <__bad_interrupt>
  1a:	1c c0       	rjmp	.+56     	; 0x54 <__bad_interrupt>
  1c:	1b c0       	rjmp	.+54     	; 0x54 <__bad_interrupt>
  1e:	1a c0       	rjmp	.+52     	; 0x54 <__bad_interrupt>
  20:	19 c0       	rjmp	.+50     	; 0x54 <__bad_interrupt>
  22:	18 c0       	rjmp	.+48     	; 0x54 <__bad_interrupt>
  24:	17 c0       	rjmp	.+46     	; 0x54 <__bad_interrupt>
  26:	16 c0       	rjmp	.+44     	; 0x54 <__bad_interrupt>
  28:	15 c0       	rjmp	.+42     	; 0x54 <__bad_interrupt>
  2a:	14 c0       	rjmp	.+40     	; 0x54 <__bad_interrupt>
  2c:	13 c0       	rjmp	.+38     	; 0x54 <__bad_interrupt>
  2e:	12 c0       	rjmp	.+36     	; 0x54 <__bad_interrupt>
  30:	11 c0       	rjmp	.+34     	; 0x54 <__bad_interrupt>
  32:	10 c0       	rjmp	.+32     	; 0x54 <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	cd bf       	out	0x3d, r28	; 61
  3c:	df e3       	ldi	r29, 0x3F	; 63
  3e:	de bf       	out	0x3e, r29	; 62

00000040 <__do_clear_bss>:
  40:	2f e3       	ldi	r18, 0x3F	; 63
  42:	a0 e8       	ldi	r26, 0x80	; 128
  44:	bf e3       	ldi	r27, 0x3F	; 63
  46:	01 c0       	rjmp	.+2      	; 0x4a <.do_clear_bss_start>

00000048 <.do_clear_bss_loop>:
  48:	1d 92       	st	X+, r1

0000004a <.do_clear_bss_start>:
  4a:	a1 38       	cpi	r26, 0x81	; 129
  4c:	b2 07       	cpc	r27, r18
  4e:	e1 f7       	brne	.-8      	; 0x48 <.do_clear_bss_loop>
  50:	02 d0       	rcall	.+4      	; 0x56 <main>
  52:	22 c2       	rjmp	.+1092   	; 0x498 <_exit>

00000054 <__bad_interrupt>:
  54:	d5 cf       	rjmp	.-86     	; 0x0 <__vectors>

00000056 <main>:
#include <util/delay.h>

int8_t value;

int main(void)
{
  56:	cf 93       	push	r28
  58:	df 93       	push	r29
  5a:	cd b7       	in	r28, 0x3d	; 61
  5c:	de b7       	in	r29, 0x3e	; 62
  5e:	6d 97       	sbiw	r28, 0x1d	; 29
  60:	cd bf       	out	0x3d, r28	; 61
  62:	de bf       	out	0x3e, r29	; 62
	value++;
  64:	80 91 80 3f 	lds	r24, 0x3F80	; 0x803f80 <__DATA_REGION_ORIGIN__>
  68:	8f 5f       	subi	r24, 0xFF	; 255
  6a:	80 93 80 3f 	sts	0x3F80, r24	; 0x803f80 <__DATA_REGION_ORIGIN__>
	PORTA.DIRSET = (1 << 2);			// Pin 2 im Richtungsregister auf 1 = Output
  6e:	80 e0       	ldi	r24, 0x00	; 0
  70:	94 e0       	ldi	r25, 0x04	; 4
  72:	24 e0       	ldi	r18, 0x04	; 4
  74:	fc 01       	movw	r30, r24
  76:	21 83       	std	Z+1, r18	; 0x01
	
	for (uint8_t cnt = 120; cnt < 200; cnt++)	
  78:	88 e7       	ldi	r24, 0x78	; 120
  7a:	89 83       	std	Y+1, r24	; 0x01
  7c:	ed c0       	rjmp	.+474    	; 0x258 <__DATA_REGION_LENGTH__+0x1d8>
	{
		PORTA.OUTSET |= (1 << 2);		// PA2 LED HIGH (ein)
  7e:	80 e0       	ldi	r24, 0x00	; 0
  80:	94 e0       	ldi	r25, 0x04	; 4
  82:	20 e0       	ldi	r18, 0x00	; 0
  84:	34 e0       	ldi	r19, 0x04	; 4
  86:	f9 01       	movw	r30, r18
  88:	25 81       	ldd	r18, Z+5	; 0x05
  8a:	24 60       	ori	r18, 0x04	; 4
  8c:	fc 01       	movw	r30, r24
  8e:	25 83       	std	Z+5, r18	; 0x05
  90:	80 e0       	ldi	r24, 0x00	; 0
  92:	90 e0       	ldi	r25, 0x00	; 0
  94:	a8 e4       	ldi	r26, 0x48	; 72
  96:	b2 e4       	ldi	r27, 0x42	; 66
  98:	8a 83       	std	Y+2, r24	; 0x02
  9a:	9b 83       	std	Y+3, r25	; 0x03
  9c:	ac 83       	std	Y+4, r26	; 0x04
  9e:	bd 83       	std	Y+5, r27	; 0x05

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
  a0:	24 e5       	ldi	r18, 0x54	; 84
  a2:	35 e5       	ldi	r19, 0x55	; 85
  a4:	40 e5       	ldi	r20, 0x50	; 80
  a6:	54 e4       	ldi	r21, 0x44	; 68
  a8:	6a 81       	ldd	r22, Y+2	; 0x02
  aa:	7b 81       	ldd	r23, Y+3	; 0x03
  ac:	8c 81       	ldd	r24, Y+4	; 0x04
  ae:	9d 81       	ldd	r25, Y+5	; 0x05
  b0:	5e d1       	rcall	.+700    	; 0x36e <__mulsf3>
  b2:	dc 01       	movw	r26, r24
  b4:	cb 01       	movw	r24, r22
  b6:	8c 8b       	std	Y+20, r24	; 0x14
  b8:	9d 8b       	std	Y+21, r25	; 0x15
  ba:	ae 8b       	std	Y+22, r26	; 0x16
  bc:	bf 8b       	std	Y+23, r27	; 0x17
	if (__tmp < 1.0)
  be:	20 e0       	ldi	r18, 0x00	; 0
  c0:	30 e0       	ldi	r19, 0x00	; 0
  c2:	40 e8       	ldi	r20, 0x80	; 128
  c4:	5f e3       	ldi	r21, 0x3F	; 63
  c6:	6c 89       	ldd	r22, Y+20	; 0x14
  c8:	7d 89       	ldd	r23, Y+21	; 0x15
  ca:	8e 89       	ldd	r24, Y+22	; 0x16
  cc:	9f 89       	ldd	r25, Y+23	; 0x17
  ce:	c9 d0       	rcall	.+402    	; 0x262 <__cmpsf2>
  d0:	88 23       	and	r24, r24
  d2:	2c f4       	brge	.+10     	; 0xde <__DATA_REGION_LENGTH__+0x5e>
		__ticks = 1;
  d4:	81 e0       	ldi	r24, 0x01	; 1
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	88 8f       	std	Y+24, r24	; 0x18
  da:	99 8f       	std	Y+25, r25	; 0x19
  dc:	3b c0       	rjmp	.+118    	; 0x154 <__DATA_REGION_LENGTH__+0xd4>
	else if (__tmp > 65535)
  de:	20 e0       	ldi	r18, 0x00	; 0
  e0:	3f ef       	ldi	r19, 0xFF	; 255
  e2:	4f e7       	ldi	r20, 0x7F	; 127
  e4:	57 e4       	ldi	r21, 0x47	; 71
  e6:	6c 89       	ldd	r22, Y+20	; 0x14
  e8:	7d 89       	ldd	r23, Y+21	; 0x15
  ea:	8e 89       	ldd	r24, Y+22	; 0x16
  ec:	9f 89       	ldd	r25, Y+23	; 0x17
  ee:	3a d1       	rcall	.+628    	; 0x364 <__gesf2>
  f0:	18 16       	cp	r1, r24
  f2:	3c f5       	brge	.+78     	; 0x142 <__DATA_REGION_LENGTH__+0xc2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
  f4:	20 e0       	ldi	r18, 0x00	; 0
  f6:	30 e0       	ldi	r19, 0x00	; 0
  f8:	40 e2       	ldi	r20, 0x20	; 32
  fa:	51 e4       	ldi	r21, 0x41	; 65
  fc:	6a 81       	ldd	r22, Y+2	; 0x02
  fe:	7b 81       	ldd	r23, Y+3	; 0x03
 100:	8c 81       	ldd	r24, Y+4	; 0x04
 102:	9d 81       	ldd	r25, Y+5	; 0x05
 104:	34 d1       	rcall	.+616    	; 0x36e <__mulsf3>
 106:	dc 01       	movw	r26, r24
 108:	cb 01       	movw	r24, r22
 10a:	bc 01       	movw	r22, r24
 10c:	cd 01       	movw	r24, r26
 10e:	ae d0       	rcall	.+348    	; 0x26c <__fixunssfsi>
 110:	dc 01       	movw	r26, r24
 112:	cb 01       	movw	r24, r22
 114:	88 8f       	std	Y+24, r24	; 0x18
 116:	99 8f       	std	Y+25, r25	; 0x19
 118:	0f c0       	rjmp	.+30     	; 0x138 <__DATA_REGION_LENGTH__+0xb8>
 11a:	83 e5       	ldi	r24, 0x53	; 83
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	8a 8f       	std	Y+26, r24	; 0x1a
 120:	9b 8f       	std	Y+27, r25	; 0x1b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 122:	8a 8d       	ldd	r24, Y+26	; 0x1a
 124:	9b 8d       	ldd	r25, Y+27	; 0x1b
 126:	01 97       	sbiw	r24, 0x01	; 1
 128:	f1 f7       	brne	.-4      	; 0x126 <__DATA_REGION_LENGTH__+0xa6>
 12a:	8a 8f       	std	Y+26, r24	; 0x1a
 12c:	9b 8f       	std	Y+27, r25	; 0x1b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 12e:	88 8d       	ldd	r24, Y+24	; 0x18
 130:	99 8d       	ldd	r25, Y+25	; 0x19
 132:	01 97       	sbiw	r24, 0x01	; 1
 134:	88 8f       	std	Y+24, r24	; 0x18
 136:	99 8f       	std	Y+25, r25	; 0x19
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 138:	88 8d       	ldd	r24, Y+24	; 0x18
 13a:	99 8d       	ldd	r25, Y+25	; 0x19
 13c:	89 2b       	or	r24, r25
 13e:	69 f7       	brne	.-38     	; 0x11a <__DATA_REGION_LENGTH__+0x9a>
 140:	13 c0       	rjmp	.+38     	; 0x168 <__DATA_REGION_LENGTH__+0xe8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 142:	6c 89       	ldd	r22, Y+20	; 0x14
 144:	7d 89       	ldd	r23, Y+21	; 0x15
 146:	8e 89       	ldd	r24, Y+22	; 0x16
 148:	9f 89       	ldd	r25, Y+23	; 0x17
 14a:	90 d0       	rcall	.+288    	; 0x26c <__fixunssfsi>
 14c:	dc 01       	movw	r26, r24
 14e:	cb 01       	movw	r24, r22
 150:	88 8f       	std	Y+24, r24	; 0x18
 152:	99 8f       	std	Y+25, r25	; 0x19
 154:	88 8d       	ldd	r24, Y+24	; 0x18
 156:	99 8d       	ldd	r25, Y+25	; 0x19
 158:	8c 8f       	std	Y+28, r24	; 0x1c
 15a:	9d 8f       	std	Y+29, r25	; 0x1d
 15c:	8c 8d       	ldd	r24, Y+28	; 0x1c
 15e:	9d 8d       	ldd	r25, Y+29	; 0x1d
 160:	01 97       	sbiw	r24, 0x01	; 1
 162:	f1 f7       	brne	.-4      	; 0x160 <__DATA_REGION_LENGTH__+0xe0>
 164:	8c 8f       	std	Y+28, r24	; 0x1c
 166:	9d 8f       	std	Y+29, r25	; 0x1d
		_delay_ms(50);
		PORTA.OUTCLR |= (1 << 2);		// PA2 LED LOW
 168:	80 e0       	ldi	r24, 0x00	; 0
 16a:	94 e0       	ldi	r25, 0x04	; 4
 16c:	20 e0       	ldi	r18, 0x00	; 0
 16e:	34 e0       	ldi	r19, 0x04	; 4
 170:	f9 01       	movw	r30, r18
 172:	26 81       	ldd	r18, Z+6	; 0x06
 174:	24 60       	ori	r18, 0x04	; 4
 176:	fc 01       	movw	r30, r24
 178:	26 83       	std	Z+6, r18	; 0x06
 17a:	80 e0       	ldi	r24, 0x00	; 0
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	a8 e4       	ldi	r26, 0x48	; 72
 180:	b2 e4       	ldi	r27, 0x42	; 66
 182:	8e 83       	std	Y+6, r24	; 0x06
 184:	9f 83       	std	Y+7, r25	; 0x07
 186:	a8 87       	std	Y+8, r26	; 0x08
 188:	b9 87       	std	Y+9, r27	; 0x09

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 18a:	24 e5       	ldi	r18, 0x54	; 84
 18c:	35 e5       	ldi	r19, 0x55	; 85
 18e:	40 e5       	ldi	r20, 0x50	; 80
 190:	54 e4       	ldi	r21, 0x44	; 68
 192:	6e 81       	ldd	r22, Y+6	; 0x06
 194:	7f 81       	ldd	r23, Y+7	; 0x07
 196:	88 85       	ldd	r24, Y+8	; 0x08
 198:	99 85       	ldd	r25, Y+9	; 0x09
 19a:	e9 d0       	rcall	.+466    	; 0x36e <__mulsf3>
 19c:	dc 01       	movw	r26, r24
 19e:	cb 01       	movw	r24, r22
 1a0:	8a 87       	std	Y+10, r24	; 0x0a
 1a2:	9b 87       	std	Y+11, r25	; 0x0b
 1a4:	ac 87       	std	Y+12, r26	; 0x0c
 1a6:	bd 87       	std	Y+13, r27	; 0x0d
	if (__tmp < 1.0)
 1a8:	20 e0       	ldi	r18, 0x00	; 0
 1aa:	30 e0       	ldi	r19, 0x00	; 0
 1ac:	40 e8       	ldi	r20, 0x80	; 128
 1ae:	5f e3       	ldi	r21, 0x3F	; 63
 1b0:	6a 85       	ldd	r22, Y+10	; 0x0a
 1b2:	7b 85       	ldd	r23, Y+11	; 0x0b
 1b4:	8c 85       	ldd	r24, Y+12	; 0x0c
 1b6:	9d 85       	ldd	r25, Y+13	; 0x0d
 1b8:	54 d0       	rcall	.+168    	; 0x262 <__cmpsf2>
 1ba:	88 23       	and	r24, r24
 1bc:	2c f4       	brge	.+10     	; 0x1c8 <__DATA_REGION_LENGTH__+0x148>
		__ticks = 1;
 1be:	81 e0       	ldi	r24, 0x01	; 1
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	8e 87       	std	Y+14, r24	; 0x0e
 1c4:	9f 87       	std	Y+15, r25	; 0x0f
 1c6:	3b c0       	rjmp	.+118    	; 0x23e <__DATA_REGION_LENGTH__+0x1be>
	else if (__tmp > 65535)
 1c8:	20 e0       	ldi	r18, 0x00	; 0
 1ca:	3f ef       	ldi	r19, 0xFF	; 255
 1cc:	4f e7       	ldi	r20, 0x7F	; 127
 1ce:	57 e4       	ldi	r21, 0x47	; 71
 1d0:	6a 85       	ldd	r22, Y+10	; 0x0a
 1d2:	7b 85       	ldd	r23, Y+11	; 0x0b
 1d4:	8c 85       	ldd	r24, Y+12	; 0x0c
 1d6:	9d 85       	ldd	r25, Y+13	; 0x0d
 1d8:	c5 d0       	rcall	.+394    	; 0x364 <__gesf2>
 1da:	18 16       	cp	r1, r24
 1dc:	3c f5       	brge	.+78     	; 0x22c <__DATA_REGION_LENGTH__+0x1ac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 1de:	20 e0       	ldi	r18, 0x00	; 0
 1e0:	30 e0       	ldi	r19, 0x00	; 0
 1e2:	40 e2       	ldi	r20, 0x20	; 32
 1e4:	51 e4       	ldi	r21, 0x41	; 65
 1e6:	6e 81       	ldd	r22, Y+6	; 0x06
 1e8:	7f 81       	ldd	r23, Y+7	; 0x07
 1ea:	88 85       	ldd	r24, Y+8	; 0x08
 1ec:	99 85       	ldd	r25, Y+9	; 0x09
 1ee:	bf d0       	rcall	.+382    	; 0x36e <__mulsf3>
 1f0:	dc 01       	movw	r26, r24
 1f2:	cb 01       	movw	r24, r22
 1f4:	bc 01       	movw	r22, r24
 1f6:	cd 01       	movw	r24, r26
 1f8:	39 d0       	rcall	.+114    	; 0x26c <__fixunssfsi>
 1fa:	dc 01       	movw	r26, r24
 1fc:	cb 01       	movw	r24, r22
 1fe:	8e 87       	std	Y+14, r24	; 0x0e
 200:	9f 87       	std	Y+15, r25	; 0x0f
 202:	0f c0       	rjmp	.+30     	; 0x222 <__DATA_REGION_LENGTH__+0x1a2>
 204:	83 e5       	ldi	r24, 0x53	; 83
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	88 8b       	std	Y+16, r24	; 0x10
 20a:	99 8b       	std	Y+17, r25	; 0x11
 20c:	88 89       	ldd	r24, Y+16	; 0x10
 20e:	99 89       	ldd	r25, Y+17	; 0x11
 210:	01 97       	sbiw	r24, 0x01	; 1
 212:	f1 f7       	brne	.-4      	; 0x210 <__DATA_REGION_LENGTH__+0x190>
 214:	88 8b       	std	Y+16, r24	; 0x10
 216:	99 8b       	std	Y+17, r25	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 218:	8e 85       	ldd	r24, Y+14	; 0x0e
 21a:	9f 85       	ldd	r25, Y+15	; 0x0f
 21c:	01 97       	sbiw	r24, 0x01	; 1
 21e:	8e 87       	std	Y+14, r24	; 0x0e
 220:	9f 87       	std	Y+15, r25	; 0x0f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 222:	8e 85       	ldd	r24, Y+14	; 0x0e
 224:	9f 85       	ldd	r25, Y+15	; 0x0f
 226:	89 2b       	or	r24, r25
 228:	69 f7       	brne	.-38     	; 0x204 <__DATA_REGION_LENGTH__+0x184>
 22a:	13 c0       	rjmp	.+38     	; 0x252 <__DATA_REGION_LENGTH__+0x1d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 22c:	6a 85       	ldd	r22, Y+10	; 0x0a
 22e:	7b 85       	ldd	r23, Y+11	; 0x0b
 230:	8c 85       	ldd	r24, Y+12	; 0x0c
 232:	9d 85       	ldd	r25, Y+13	; 0x0d
 234:	1b d0       	rcall	.+54     	; 0x26c <__fixunssfsi>
 236:	dc 01       	movw	r26, r24
 238:	cb 01       	movw	r24, r22
 23a:	8e 87       	std	Y+14, r24	; 0x0e
 23c:	9f 87       	std	Y+15, r25	; 0x0f
 23e:	8e 85       	ldd	r24, Y+14	; 0x0e
 240:	9f 85       	ldd	r25, Y+15	; 0x0f
 242:	8a 8b       	std	Y+18, r24	; 0x12
 244:	9b 8b       	std	Y+19, r25	; 0x13
 246:	8a 89       	ldd	r24, Y+18	; 0x12
 248:	9b 89       	ldd	r25, Y+19	; 0x13
 24a:	01 97       	sbiw	r24, 0x01	; 1
 24c:	f1 f7       	brne	.-4      	; 0x24a <__DATA_REGION_LENGTH__+0x1ca>
 24e:	8a 8b       	std	Y+18, r24	; 0x12
 250:	9b 8b       	std	Y+19, r25	; 0x13
int main(void)
{
	value++;
	PORTA.DIRSET = (1 << 2);			// Pin 2 im Richtungsregister auf 1 = Output
	
	for (uint8_t cnt = 120; cnt < 200; cnt++)	
 252:	89 81       	ldd	r24, Y+1	; 0x01
 254:	8f 5f       	subi	r24, 0xFF	; 255
 256:	89 83       	std	Y+1, r24	; 0x01
 258:	89 81       	ldd	r24, Y+1	; 0x01
 25a:	88 3c       	cpi	r24, 0xC8	; 200
 25c:	08 f4       	brcc	.+2      	; 0x260 <__DATA_REGION_LENGTH__+0x1e0>
 25e:	0f cf       	rjmp	.-482    	; 0x7e <main+0x28>
		PORTA.OUTSET |= (1 << 2);		// PA2 LED HIGH (ein)
		_delay_ms(50);
		PORTA.OUTCLR |= (1 << 2);		// PA2 LED LOW
		_delay_ms(50);
	}
	while (1);
 260:	ff cf       	rjmp	.-2      	; 0x260 <__DATA_REGION_LENGTH__+0x1e0>

00000262 <__cmpsf2>:
 262:	0e 94 65 01 	call	0x2ca	; 0x2ca <__fp_cmp>
 266:	08 f4       	brcc	.+2      	; 0x26a <__cmpsf2+0x8>
 268:	81 e0       	ldi	r24, 0x01	; 1
 26a:	08 95       	ret

0000026c <__fixunssfsi>:
 26c:	0e 94 91 01 	call	0x322	; 0x322 <__fp_splitA>
 270:	88 f0       	brcs	.+34     	; 0x294 <__fixunssfsi+0x28>
 272:	9f 57       	subi	r25, 0x7F	; 127
 274:	98 f0       	brcs	.+38     	; 0x29c <__fixunssfsi+0x30>
 276:	b9 2f       	mov	r27, r25
 278:	99 27       	eor	r25, r25
 27a:	b7 51       	subi	r27, 0x17	; 23
 27c:	b0 f0       	brcs	.+44     	; 0x2aa <__fixunssfsi+0x3e>
 27e:	e1 f0       	breq	.+56     	; 0x2b8 <__fixunssfsi+0x4c>
 280:	66 0f       	add	r22, r22
 282:	77 1f       	adc	r23, r23
 284:	88 1f       	adc	r24, r24
 286:	99 1f       	adc	r25, r25
 288:	1a f0       	brmi	.+6      	; 0x290 <__fixunssfsi+0x24>
 28a:	ba 95       	dec	r27
 28c:	c9 f7       	brne	.-14     	; 0x280 <__fixunssfsi+0x14>
 28e:	14 c0       	rjmp	.+40     	; 0x2b8 <__fixunssfsi+0x4c>
 290:	b1 30       	cpi	r27, 0x01	; 1
 292:	91 f0       	breq	.+36     	; 0x2b8 <__fixunssfsi+0x4c>
 294:	0e 94 ab 01 	call	0x356	; 0x356 <__fp_zero>
 298:	b1 e0       	ldi	r27, 0x01	; 1
 29a:	08 95       	ret
 29c:	0c 94 ab 01 	jmp	0x356	; 0x356 <__fp_zero>
 2a0:	67 2f       	mov	r22, r23
 2a2:	78 2f       	mov	r23, r24
 2a4:	88 27       	eor	r24, r24
 2a6:	b8 5f       	subi	r27, 0xF8	; 248
 2a8:	39 f0       	breq	.+14     	; 0x2b8 <__fixunssfsi+0x4c>
 2aa:	b9 3f       	cpi	r27, 0xF9	; 249
 2ac:	cc f3       	brlt	.-14     	; 0x2a0 <__fixunssfsi+0x34>
 2ae:	86 95       	lsr	r24
 2b0:	77 95       	ror	r23
 2b2:	67 95       	ror	r22
 2b4:	b3 95       	inc	r27
 2b6:	d9 f7       	brne	.-10     	; 0x2ae <__fixunssfsi+0x42>
 2b8:	3e f4       	brtc	.+14     	; 0x2c8 <__fixunssfsi+0x5c>
 2ba:	90 95       	com	r25
 2bc:	80 95       	com	r24
 2be:	70 95       	com	r23
 2c0:	61 95       	neg	r22
 2c2:	7f 4f       	sbci	r23, 0xFF	; 255
 2c4:	8f 4f       	sbci	r24, 0xFF	; 255
 2c6:	9f 4f       	sbci	r25, 0xFF	; 255
 2c8:	08 95       	ret

000002ca <__fp_cmp>:
 2ca:	99 0f       	add	r25, r25
 2cc:	00 08       	sbc	r0, r0
 2ce:	55 0f       	add	r21, r21
 2d0:	aa 0b       	sbc	r26, r26
 2d2:	e0 e8       	ldi	r30, 0x80	; 128
 2d4:	fe ef       	ldi	r31, 0xFE	; 254
 2d6:	16 16       	cp	r1, r22
 2d8:	17 06       	cpc	r1, r23
 2da:	e8 07       	cpc	r30, r24
 2dc:	f9 07       	cpc	r31, r25
 2de:	c0 f0       	brcs	.+48     	; 0x310 <__fp_cmp+0x46>
 2e0:	12 16       	cp	r1, r18
 2e2:	13 06       	cpc	r1, r19
 2e4:	e4 07       	cpc	r30, r20
 2e6:	f5 07       	cpc	r31, r21
 2e8:	98 f0       	brcs	.+38     	; 0x310 <__fp_cmp+0x46>
 2ea:	62 1b       	sub	r22, r18
 2ec:	73 0b       	sbc	r23, r19
 2ee:	84 0b       	sbc	r24, r20
 2f0:	95 0b       	sbc	r25, r21
 2f2:	39 f4       	brne	.+14     	; 0x302 <__fp_cmp+0x38>
 2f4:	0a 26       	eor	r0, r26
 2f6:	61 f0       	breq	.+24     	; 0x310 <__fp_cmp+0x46>
 2f8:	23 2b       	or	r18, r19
 2fa:	24 2b       	or	r18, r20
 2fc:	25 2b       	or	r18, r21
 2fe:	21 f4       	brne	.+8      	; 0x308 <__fp_cmp+0x3e>
 300:	08 95       	ret
 302:	0a 26       	eor	r0, r26
 304:	09 f4       	brne	.+2      	; 0x308 <__fp_cmp+0x3e>
 306:	a1 40       	sbci	r26, 0x01	; 1
 308:	a6 95       	lsr	r26
 30a:	8f ef       	ldi	r24, 0xFF	; 255
 30c:	81 1d       	adc	r24, r1
 30e:	81 1d       	adc	r24, r1
 310:	08 95       	ret

00000312 <__fp_split3>:
 312:	57 fd       	sbrc	r21, 7
 314:	90 58       	subi	r25, 0x80	; 128
 316:	44 0f       	add	r20, r20
 318:	55 1f       	adc	r21, r21
 31a:	59 f0       	breq	.+22     	; 0x332 <__fp_splitA+0x10>
 31c:	5f 3f       	cpi	r21, 0xFF	; 255
 31e:	71 f0       	breq	.+28     	; 0x33c <__fp_splitA+0x1a>
 320:	47 95       	ror	r20

00000322 <__fp_splitA>:
 322:	88 0f       	add	r24, r24
 324:	97 fb       	bst	r25, 7
 326:	99 1f       	adc	r25, r25
 328:	61 f0       	breq	.+24     	; 0x342 <__fp_splitA+0x20>
 32a:	9f 3f       	cpi	r25, 0xFF	; 255
 32c:	79 f0       	breq	.+30     	; 0x34c <__fp_splitA+0x2a>
 32e:	87 95       	ror	r24
 330:	08 95       	ret
 332:	12 16       	cp	r1, r18
 334:	13 06       	cpc	r1, r19
 336:	14 06       	cpc	r1, r20
 338:	55 1f       	adc	r21, r21
 33a:	f2 cf       	rjmp	.-28     	; 0x320 <__fp_split3+0xe>
 33c:	46 95       	lsr	r20
 33e:	f1 df       	rcall	.-30     	; 0x322 <__fp_splitA>
 340:	08 c0       	rjmp	.+16     	; 0x352 <__fp_splitA+0x30>
 342:	16 16       	cp	r1, r22
 344:	17 06       	cpc	r1, r23
 346:	18 06       	cpc	r1, r24
 348:	99 1f       	adc	r25, r25
 34a:	f1 cf       	rjmp	.-30     	; 0x32e <__fp_splitA+0xc>
 34c:	86 95       	lsr	r24
 34e:	71 05       	cpc	r23, r1
 350:	61 05       	cpc	r22, r1
 352:	08 94       	sec
 354:	08 95       	ret

00000356 <__fp_zero>:
 356:	e8 94       	clt

00000358 <__fp_szero>:
 358:	bb 27       	eor	r27, r27
 35a:	66 27       	eor	r22, r22
 35c:	77 27       	eor	r23, r23
 35e:	cb 01       	movw	r24, r22
 360:	97 f9       	bld	r25, 7
 362:	08 95       	ret

00000364 <__gesf2>:
 364:	0e 94 65 01 	call	0x2ca	; 0x2ca <__fp_cmp>
 368:	08 f4       	brcc	.+2      	; 0x36c <__gesf2+0x8>
 36a:	8f ef       	ldi	r24, 0xFF	; 255
 36c:	08 95       	ret

0000036e <__mulsf3>:
 36e:	0e 94 ca 01 	call	0x394	; 0x394 <__mulsf3x>
 372:	0c 94 3b 02 	jmp	0x476	; 0x476 <__fp_round>
 376:	0e 94 2d 02 	call	0x45a	; 0x45a <__fp_pscA>
 37a:	38 f0       	brcs	.+14     	; 0x38a <__mulsf3+0x1c>
 37c:	0e 94 34 02 	call	0x468	; 0x468 <__fp_pscB>
 380:	20 f0       	brcs	.+8      	; 0x38a <__mulsf3+0x1c>
 382:	95 23       	and	r25, r21
 384:	11 f0       	breq	.+4      	; 0x38a <__mulsf3+0x1c>
 386:	0c 94 24 02 	jmp	0x448	; 0x448 <__fp_inf>
 38a:	0c 94 2a 02 	jmp	0x454	; 0x454 <__fp_nan>
 38e:	11 24       	eor	r1, r1
 390:	0c 94 ac 01 	jmp	0x358	; 0x358 <__fp_szero>

00000394 <__mulsf3x>:
 394:	0e 94 89 01 	call	0x312	; 0x312 <__fp_split3>
 398:	70 f3       	brcs	.-36     	; 0x376 <__mulsf3+0x8>

0000039a <__mulsf3_pse>:
 39a:	95 9f       	mul	r25, r21
 39c:	c1 f3       	breq	.-16     	; 0x38e <__mulsf3+0x20>
 39e:	95 0f       	add	r25, r21
 3a0:	50 e0       	ldi	r21, 0x00	; 0
 3a2:	55 1f       	adc	r21, r21
 3a4:	62 9f       	mul	r22, r18
 3a6:	f0 01       	movw	r30, r0
 3a8:	72 9f       	mul	r23, r18
 3aa:	bb 27       	eor	r27, r27
 3ac:	f0 0d       	add	r31, r0
 3ae:	b1 1d       	adc	r27, r1
 3b0:	63 9f       	mul	r22, r19
 3b2:	aa 27       	eor	r26, r26
 3b4:	f0 0d       	add	r31, r0
 3b6:	b1 1d       	adc	r27, r1
 3b8:	aa 1f       	adc	r26, r26
 3ba:	64 9f       	mul	r22, r20
 3bc:	66 27       	eor	r22, r22
 3be:	b0 0d       	add	r27, r0
 3c0:	a1 1d       	adc	r26, r1
 3c2:	66 1f       	adc	r22, r22
 3c4:	82 9f       	mul	r24, r18
 3c6:	22 27       	eor	r18, r18
 3c8:	b0 0d       	add	r27, r0
 3ca:	a1 1d       	adc	r26, r1
 3cc:	62 1f       	adc	r22, r18
 3ce:	73 9f       	mul	r23, r19
 3d0:	b0 0d       	add	r27, r0
 3d2:	a1 1d       	adc	r26, r1
 3d4:	62 1f       	adc	r22, r18
 3d6:	83 9f       	mul	r24, r19
 3d8:	a0 0d       	add	r26, r0
 3da:	61 1d       	adc	r22, r1
 3dc:	22 1f       	adc	r18, r18
 3de:	74 9f       	mul	r23, r20
 3e0:	33 27       	eor	r19, r19
 3e2:	a0 0d       	add	r26, r0
 3e4:	61 1d       	adc	r22, r1
 3e6:	23 1f       	adc	r18, r19
 3e8:	84 9f       	mul	r24, r20
 3ea:	60 0d       	add	r22, r0
 3ec:	21 1d       	adc	r18, r1
 3ee:	82 2f       	mov	r24, r18
 3f0:	76 2f       	mov	r23, r22
 3f2:	6a 2f       	mov	r22, r26
 3f4:	11 24       	eor	r1, r1
 3f6:	9f 57       	subi	r25, 0x7F	; 127
 3f8:	50 40       	sbci	r21, 0x00	; 0
 3fa:	9a f0       	brmi	.+38     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
 3fc:	f1 f0       	breq	.+60     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
 3fe:	88 23       	and	r24, r24
 400:	4a f0       	brmi	.+18     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 402:	ee 0f       	add	r30, r30
 404:	ff 1f       	adc	r31, r31
 406:	bb 1f       	adc	r27, r27
 408:	66 1f       	adc	r22, r22
 40a:	77 1f       	adc	r23, r23
 40c:	88 1f       	adc	r24, r24
 40e:	91 50       	subi	r25, 0x01	; 1
 410:	50 40       	sbci	r21, 0x00	; 0
 412:	a9 f7       	brne	.-22     	; 0x3fe <__mulsf3_pse+0x64>
 414:	9e 3f       	cpi	r25, 0xFE	; 254
 416:	51 05       	cpc	r21, r1
 418:	80 f0       	brcs	.+32     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
 41a:	0c 94 24 02 	jmp	0x448	; 0x448 <__fp_inf>
 41e:	0c 94 ac 01 	jmp	0x358	; 0x358 <__fp_szero>
 422:	5f 3f       	cpi	r21, 0xFF	; 255
 424:	e4 f3       	brlt	.-8      	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 426:	98 3e       	cpi	r25, 0xE8	; 232
 428:	d4 f3       	brlt	.-12     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 42a:	86 95       	lsr	r24
 42c:	77 95       	ror	r23
 42e:	67 95       	ror	r22
 430:	b7 95       	ror	r27
 432:	f7 95       	ror	r31
 434:	e7 95       	ror	r30
 436:	9f 5f       	subi	r25, 0xFF	; 255
 438:	c1 f7       	brne	.-16     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
 43a:	fe 2b       	or	r31, r30
 43c:	88 0f       	add	r24, r24
 43e:	91 1d       	adc	r25, r1
 440:	96 95       	lsr	r25
 442:	87 95       	ror	r24
 444:	97 f9       	bld	r25, 7
 446:	08 95       	ret

00000448 <__fp_inf>:
 448:	97 f9       	bld	r25, 7
 44a:	9f 67       	ori	r25, 0x7F	; 127
 44c:	80 e8       	ldi	r24, 0x80	; 128
 44e:	70 e0       	ldi	r23, 0x00	; 0
 450:	60 e0       	ldi	r22, 0x00	; 0
 452:	08 95       	ret

00000454 <__fp_nan>:
 454:	9f ef       	ldi	r25, 0xFF	; 255
 456:	80 ec       	ldi	r24, 0xC0	; 192
 458:	08 95       	ret

0000045a <__fp_pscA>:
 45a:	00 24       	eor	r0, r0
 45c:	0a 94       	dec	r0
 45e:	16 16       	cp	r1, r22
 460:	17 06       	cpc	r1, r23
 462:	18 06       	cpc	r1, r24
 464:	09 06       	cpc	r0, r25
 466:	08 95       	ret

00000468 <__fp_pscB>:
 468:	00 24       	eor	r0, r0
 46a:	0a 94       	dec	r0
 46c:	12 16       	cp	r1, r18
 46e:	13 06       	cpc	r1, r19
 470:	14 06       	cpc	r1, r20
 472:	05 06       	cpc	r0, r21
 474:	08 95       	ret

00000476 <__fp_round>:
 476:	09 2e       	mov	r0, r25
 478:	03 94       	inc	r0
 47a:	00 0c       	add	r0, r0
 47c:	11 f4       	brne	.+4      	; 0x482 <__fp_round+0xc>
 47e:	88 23       	and	r24, r24
 480:	52 f0       	brmi	.+20     	; 0x496 <__fp_round+0x20>
 482:	bb 0f       	add	r27, r27
 484:	40 f4       	brcc	.+16     	; 0x496 <__fp_round+0x20>
 486:	bf 2b       	or	r27, r31
 488:	11 f4       	brne	.+4      	; 0x48e <__fp_round+0x18>
 48a:	60 ff       	sbrs	r22, 0
 48c:	04 c0       	rjmp	.+8      	; 0x496 <__fp_round+0x20>
 48e:	6f 5f       	subi	r22, 0xFF	; 255
 490:	7f 4f       	sbci	r23, 0xFF	; 255
 492:	8f 4f       	sbci	r24, 0xFF	; 255
 494:	9f 4f       	sbci	r25, 0xFF	; 255
 496:	08 95       	ret

00000498 <_exit>:
 498:	f8 94       	cli

0000049a <__stop_program>:
 49a:	ff cf       	rjmp	.-2      	; 0x49a <__stop_program>
